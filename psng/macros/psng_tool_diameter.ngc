o<psng_tool_diameter> sub
#<_probe_number> = #<_ini[PROBE_SCREEN]PROBE_NUMBER>

o10 if [#<_hal[probe.setterheight]> LE 0]   ; AT THE END NEED TO CHOOSE #<_hal[probe.setterheight or #<_ini[TOOLSENSOR]TS_HEIGHT>
     o<psng_hook_end> call
    (ABORT,TOOLSETTER HEIGHT NOT PROBED/CONFIGURED)
o10 endif

o<psng_goto_toolsensor> call

(cancel all Z offsets)(+ cutter compensation for diameter measurement)
G92.1                                                                       ; use pause/restore can be better than reset ???
G49 ;G40

o<psng_coord_offset_backup> call                                                 ; backup G54 offset for correct calc tool measurement

o<psng_start_setter_probing> call
o500 if [#5070 EQ 0]
     o<psng_hook_end> call
    (ABORT,FAILURE : TOOL SETTER FOR TOOL DIAMETER DOES NOT FOUND THE CONTACT POINT)
o500 endif

G91                    ; For the next move we need to manage additional Move away
o600 if [#<_current_tool> EQ #<_probe_number>]
     (DEBUG,USE PROBE DIAM for calc Z clearence)
     G1 Z[#<_hal[probe.ps_z_clearance]> - #<_ini[TOOLSENSOR]TS_LATCH> - 0.7*#<_hal[probe.ps_probe_diam]>] F#<_hal[probe.ps_searchvel]>
o600 else
     (DEBUG,USE Zclearence - TS_LATCH)
     G1 Z[0.7*#<_hal[probe.ps_z_clearance]> - #<_ini[TOOLSENSOR]TS_LATCH>] F#<_hal[probe.ps_searchvel]>     ; macro use ps_z_clearance*0.7 for allow tool to be en contact with setter pad
o600 endif
G90

;#<_touch_result> = [#5063 - #<_hal[probe.setterheight]> + #<_coord_offset_backup>]   ; AT THE END NEED TO CHOOSE #<_hal[probe.setterheight or #<_ini[TOOLSENSOR]TS_HEIGHT>
(print, probe Z=#<_touch_result>)

G10 L1 P#<_current_tool> Z[#<_touch_result>]

; next for x+ x- y+ y- call inside python code

(start spindle if you use reverse spindle for tool diameter measuring)
 o500 if [#<_current_tool> GT 1 AND #<_current_tool> NE #<_probe_number> and #<_hal[probe.use_rotate_spindle]> EQ 1 AND #<_hal[and2.combined-probe.in0]> EQ 1]
      M4 S#<_ini[TOOLSENSOR]REV_ROTATION_SPEED>
 o500 endif

o<psng_tool_diameter> endsub
M2

